const { Telegraf } = require('telegraf')
const dotenv = require('dotenv').config()
const bot = new Telegraf(process.env.BOT_TOKEN)
const mongoose = require('mongoose')
const { UniversityModel, UserModel } = require('./mongo')
const { Extra, Markup, Stage, session } = Telegraf

const SceneGenerator = require('./scene')
const curScene = new SceneGenerator()
const firstScene = curScene.firstScene()  //–≤–≤–µ–¥–∏ –±–∞–ª–ª—ã –∑–∞ —Ä—É—Å—Å–∫–∏–π
const secondScene = curScene.secondScene() //1 –¥–æ–ø –ø—Ä–µ–¥–º–µ—Ç
const thirdScene = curScene.thirdScene()  //–±–∞–ª–ª—ã –∑–∞ 1 –¥–æ–ø –ø—Ä–µ–¥–º–µ—Ç
const forthScene = curScene.forthScene()  //2 –¥–æ–ø –ø—Ä–µ–¥–º–µ—Ç
const fifthScene = curScene.fifthScene()  //–±–∞–ª–ª—ã –∑–∞ 2 –¥–æ–ø –ø—Ä–µ–¥–º–µ—Ç
const sixthScene = curScene.sixthScene()  //–≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—é–¥–∂–µ—Ç–µ
const comFirstScene = curScene.comFirstScene() //–∫–æ–º–º–µ—Ä—Ü–∏—è –≤—ã–±–æ—Ä 2 –¥–æ–ø –ø—Ä–µ–¥–º–µ—Ç–∞
const comSecondScene = curScene.comSecondScene() //–∫–æ–º–º–µ—Ä—Ü–∏—è –≤—ã–±–æ—Ä 3 –¥–æ–ø –ø—Ä–µ–¥–º–µ—Ç–∞
const comThirdScene = curScene.comThirdScene() //–≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–µ—Ä—Ü–∏–∏
const magScene = curScene.magScene() //–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞

const stage = new Stage([firstScene, secondScene, thirdScene, forthScene, fifthScene, sixthScene, comFirstScene, comSecondScene, comThirdScene, magScene])

//__________________________________________________________________BD
const connectionAddress = "mongodb://localhost/solo";
mongoose.connect(connectionAddress, {
  useNewUrlParser: true,
  useUnifiedTopology: true
});
const db = mongoose.connection;
db.on("error", console.error.bind(console, "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB"));
//__________________________________________________________________BD

//__________________________________________________________________middleware
bot.use(session())
bot.use(Telegraf.log(async (info) => {
  let ourjson = JSON.parse(info);
  let a = await UserModel.find({ username: ourjson.message.from.username })
  if (a.length == 0) {
    await UserModel.create({
      first_name: ourjson.message.from.first_name,
      last_name: ourjson.message.from.last_name,
      username: ourjson.message.from.username,
      language_code: ourjson.message.from.language_code
    })
  }
}))
bot.use(stage.middleware())
//__________________________________________________________________middleware

bot.command('searchBudjet', async (ctx) => {
  ctx.session.currentScore = 0;
  ctx.session.subjects = [];
  ctx.session.quiteAll = [];
  ctx.session.answer = [];
  ctx.session.realAnswer1 = '';
  ctx.session.realAnswer2 = '';
  ctx.session.allSubjects = [
    ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞', '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫', '–•–∏–º–∏—è'],
    ['–ò—Å—Ç–æ—Ä–∏—è', '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', '–ë–∏–æ–ª–æ–≥–∏—è'],
    ['–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –ò–ö–¢', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞']
  ];
  ctx.scene.enter('firstEnter')
})
bot.command('searchCommerce', async (ctx) => {
  ctx.session.subjectsCom = [];
  ctx.session.quiteAllCom = [];
  ctx.session.answerCom = [];
  ctx.session.realAnswerCom1 = '';
  ctx.session.realAnswerCom2 = '';
  ctx.session.allSubjectsCom = [
    ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞', '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫', '–•–∏–º–∏—è'],
    ['–ò—Å—Ç–æ—Ä–∏—è', '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', '–ë–∏–æ–ª–æ–≥–∏—è'],
    ['–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –ò–ö–¢', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞']
  ];

  ctx.scene.enter('comFirstEnter')
})
bot.command('searchMagistratura', async (ctx) => {
  ctx.scene.enter('MagEnter')
  //–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞
})
bot.start((ctx) => ctx.replyWithHTML('<b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç!</b>\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ø—É—Ç—å –≤ <b>–†–ê–ù–•–∏–ì–°</b>.\n–ù–∞–∂–º–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'))
bot.help((ctx) => ctx.reply('–ù–∞–∂–º–∏:\n/searchBudjet\n/searchCommerce\n/searchMagistratura'))
bot.on('sticker', (ctx) => ctx.reply('üëç'))
bot.hears('hi', (ctx) => ctx.reply('Hey there'))
bot.launch()
